{%- style -%}
  .disintegration-section {
    width: 100%;
    height: 100vh;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem 0;
  }

  .capture-canvas {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
  }

  #capture {
    position: relative;
    width: 600px;
    height: 400px;
    margin: 3rem 0;
  }

  #capture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border-radius: 8px;
  }

  .image-upload-container {
    width: 100%;
    max-width: 600px;
    text-align: center;
  }

  .custom-file-upload {
    display: inline-block;
    padding: 12px 24px;
    background: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.6rem;
    transition: background 0.3s ease;
  }

  .custom-file-upload:hover {
    background: rgba(var(--color-button), 0.8);
  }

  #imageUpload {
    display: none;
  }
{%- endstyle -%}

<div class="disintegration-section page-width">
  <div class="image-upload-container">
    <label for="imageUpload" class="custom-file-upload">
      Choose an Image
    </label>
    <input type="file" id="imageUpload" accept="image/*">
  </div>
  
  <div id="capture">
    {%- if section.settings.default_image != blank -%}
      {{ section.settings.default_image | image_url: width: 600 | image_tag: loading: 'lazy', height: 400, width: 600 }}
    {%- endif -%}
  </div>
</div>

{%- schema -%}
{
  "name": "Image Disintegration",
  "settings": [
    {
      "type": "image_picker",
      "id": "default_image",
      "label": "Default Image"
    }
  ],
  "presets": [
    {
      "name": "Image Disintegration"
    }
  ]
}
{%- endschema -%}

<script src="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
<script src="https://unpkg.com/html2canvas@1.0.0-rc.5/dist/html2canvas.js"></script>

<script>
  gsap.registerPlugin(ScrollTrigger);

  const COUNT = 75;
  const REPEAT_COUNT = 3;
  const capture = document.querySelector("#capture");
  let currentAnimation = null;

  function createCanvases(captureEl) {
    // Remove any existing canvas elements
    document.querySelectorAll('.capture-canvas').forEach(canvas => canvas.remove());
    
    html2canvas(captureEl).then((canvas) => {
      const width = canvas.width;
      const height = canvas.height;
      const ctx = canvas.getContext("2d");
      const imageData = ctx.getImageData(0, 0, width, height);
      let dataList = [];

      for (let i = 0; i < COUNT; i++) {
        dataList.push(ctx.createImageData(width, height));
      }

      for (let x = 0; x < width; x++) {
        for (let y = 0; y < height; y++) {
          for (let l = 0; l < REPEAT_COUNT; l++) {
            const index = (x + y * width) * 4;
            const dataIndex = Math.floor(
              (COUNT * (Math.random() + (2 * x) / width)) / 3
            );
            for (let p = 0; p < 4; p++) {
              dataList[dataIndex].data[index + p] = imageData.data[index + p];
            }
          }
        }
      }

      // Kill previous animation if it exists
      if (currentAnimation) {
        currentAnimation.kill();
      }

      dataList.forEach((data, i) => {
        let clonedCanvas = canvas.cloneNode();
        clonedCanvas.getContext("2d").putImageData(data, 0, 0);
        clonedCanvas.className = "capture-canvas";
        captureEl.parentElement.appendChild(clonedCanvas);

        const randomAngle = (Math.random() - 0.5) * 2 * Math.PI;
        const randomRotationAngle = 30 * (Math.random() - 0.5);

        let tl = gsap.timeline({
          scrollTrigger: {
            trigger: captureEl.parentElement,
            scrub: 1,
            start: "top top",
            end: "bottom bottom",
            markers: false
          }
        });

        tl.to(clonedCanvas, {
          duration: 1,
          rotate: randomRotationAngle,
          translateX: 40 * Math.sin(randomAngle),
          translateY: 40 * Math.cos(randomAngle),
          opacity: 0,
          delay: (i / dataList.length) * 2
        });

        currentAnimation = tl;
      });
    });
  }

  // Handle image upload
  document.getElementById('imageUpload').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(event) {
        const img = document.createElement('img');
        img.src = event.target.result;
        img.onload = function() {
          // Clear the capture div and add the new image
          capture.innerHTML = '';
          capture.appendChild(img);
          // Initialize the effect with the new image
          createCanvases(capture);
        };
      };
      reader.readAsDataURL(file);
    }
  });

  // Initialize with default image if present
  const images = gsap.utils.toArray("#capture img");
  if (images.length > 0) {
    imagesLoaded(images).on("always", () => {
      createCanvases(capture);
    });
  }
</script>
