{% doc %}
  @prompt
    A before/after image slider

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-before-after-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    display: block;
  }

  .ai-aspect-ratio-{{ ai_gen_id }} {
    position: relative;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
    height: 0;
    overflow: hidden;
  }

  .ai-before-after-container-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-before-image-{{ ai_gen_id }},
  .ai-after-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-before-image-{{ ai_gen_id }} {
    z-index: 1;
    clip-path: polygon(0% 0%, var(--position, 50%) 0%, var(--position, 50%) 100%, 0% 100%);
  }

  .ai-after-image-{{ ai_gen_id }} {
    z-index: 0;
  }

  .ai-before-after-slider-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 50%;
    width: 2px;
    height: 100%;
    background-color: {{ block.settings.slider_color }};
    z-index: 2;
    transform: translateX(-50%);
  }

  .ai-slider-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    background-color: {{ block.settings.slider_color }};
    border-radius: 50%;
    transform: translate(-50%, -50%);
    cursor: ew-resize;
    z-index: 3;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
  }

  .ai-slider-handle-{{ ai_gen_id }}::before,
  .ai-slider-handle-{{ ai_gen_id }}::after {
    content: "";
    position: absolute;
    top: 50%;
    width: 6px;
    height: 2px;
    background-color: {{ block.settings.handle_arrow_color }};
  }

  .ai-slider-handle-{{ ai_gen_id }}::before {
    left: calc(50% - 8px);
    transform: translateY(-50%) rotate(-45deg);
  }

  .ai-slider-handle-{{ ai_gen_id }}::after {
    left: calc(50% + 2px);
    transform: translateY(-50%) rotate(45deg);
  }

  .ai-image-labels-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.label_position }}px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
    box-sizing: border-box;
    z-index: 3;
    pointer-events: none;
  }

  .ai-before-label-{{ ai_gen_id }},
  .ai-after-label-{{ ai_gen_id }} {
    background-color: {{ block.settings.label_background }};
    color: {{ block.settings.label_color }};
    padding: 5px 10px;
    border-radius: 4px;
    font-size: {{ block.settings.label_size }}px;
    font-weight: 500;
  }

  .ai-image-placeholder-{{ ai_gen_id }} {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-image-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 500px;
    max-height: 500px;
  }
{% endstyle %}

<before-after-slider-{{ ai_gen_id }}
  class="ai-before-after-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-aspect-ratio-{{ ai_gen_id }}">
    <div class="ai-before-after-container-{{ ai_gen_id }}">
      {% if block.settings.before_image %}
        <img
          src="{{ block.settings.before_image | image_url: width: 2000 }}"
          alt="{{ block.settings.before_image.alt | escape | default: block.settings.before_label }}"
          loading="lazy"
          class="ai-before-image-{{ ai_gen_id }}"
        >
      {% else %}
        <div class="ai-image-placeholder-{{ ai_gen_id }} ai-before-image-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      {% endif %}

      {% if block.settings.after_image %}
        <img
          src="{{ block.settings.after_image | image_url: width: 2000 }}"
          alt="{{ block.settings.after_image.alt | escape | default: block.settings.after_label }}"
          loading="lazy"
          class="ai-after-image-{{ ai_gen_id }}"
        >
      {% else %}
        <div class="ai-image-placeholder-{{ ai_gen_id }} ai-after-image-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      {% endif %}

      <div class="ai-before-after-slider-{{ ai_gen_id }}">
        <div class="ai-slider-handle-{{ ai_gen_id }}" aria-label="Drag to compare before and after images"></div>
      </div>

      {% if block.settings.show_labels %}
        <div class="ai-image-labels-{{ ai_gen_id }}">
          <div class="ai-before-label-{{ ai_gen_id }}">{{ block.settings.before_label }}</div>
          <div class="ai-after-label-{{ ai_gen_id }}">{{ block.settings.after_label }}</div>
        </div>
      {% endif %}
    </div>
  </div>
</before-after-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class BeforeAfterSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.boundStartDrag = this.startDrag.bind(this);
        this.boundDrag = this.drag.bind(this);
        this.boundStopDrag = this.stopDrag.bind(this);
        this.boundUpdateSliderPosition = this.updateSliderPosition.bind(this);
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-before-after-container-{{ ai_gen_id }}');
        this.slider = this.querySelector('.ai-before-after-slider-{{ ai_gen_id }}');
        this.handle = this.querySelector('.ai-slider-handle-{{ ai_gen_id }}');
        this.initialPosition = {{ block.settings.initial_position }};
        this.isDragging = false;

        // Set initial position
        this.updateSliderPosition(this.initialPosition);

        // Add event listeners
        this.handle.addEventListener('mousedown', this.boundStartDrag);
        this.handle.addEventListener('touchstart', this.boundStartDrag, { passive: false });
        document.addEventListener('mousemove', this.boundDrag);
        document.addEventListener('touchmove', this.boundDrag, { passive: false });
        document.addEventListener('mouseup', this.boundStopDrag);
        document.addEventListener('touchend', this.boundStopDrag);
        window.addEventListener('resize', this.boundUpdateSliderPosition);

        // Add click event for direct position update
        this.container.addEventListener('click', (e) => {
          if (e.target === this.handle) return;
          const rect = this.container.getBoundingClientRect();
          const position = ((e.clientX - rect.left) / rect.width) * 100;
          this.updateSliderPosition(position);
        });
      }

      disconnectedCallback() {
        this.handle.removeEventListener('mousedown', this.boundStartDrag);
        this.handle.removeEventListener('touchstart', this.boundStartDrag);
        document.removeEventListener('mousemove', this.boundDrag);
        document.removeEventListener('touchmove', this.boundDrag);
        document.removeEventListener('mouseup', this.boundStopDrag);
        document.removeEventListener('touchend', this.boundStopDrag);
        window.removeEventListener('resize', this.boundUpdateSliderPosition);
      }

      startDrag(e) {
        if (e.cancelable) {
          e.preventDefault();
        }
        this.isDragging = true;
        this.container.classList.add('dragging');
      }

      drag(e) {
        if (!this.isDragging) return;
        
        if (e.cancelable) {
          e.preventDefault();
        }
        
        const containerRect = this.container.getBoundingClientRect();
        const containerWidth = containerRect.width;
        
        let clientX;
        if (e.type === 'touchmove') {
          clientX = e.touches[0].clientX;
        } else {
          clientX = e.clientX;
        }
        
        let position = ((clientX - containerRect.left) / containerWidth) * 100;
        position = Math.min(Math.max(position, 0), 100);
        
        requestAnimationFrame(() => {
          this.updateSliderPosition(position);
        });
      }

      stopDrag() {
        this.isDragging = false;
        this.container.classList.remove('dragging');
      }

      updateSliderPosition(position) {
        if (typeof position !== 'number') {
          position = this.initialPosition;
        }
        position = Math.min(Math.max(position, 0), 100);
        this.container.style.setProperty('--position', `${position}%`);
        this.slider.style.left = `${position}%`;
      }
    }

    if (!customElements.get('before-after-slider-{{ ai_gen_id }}')) {
      customElements.define('before-after-slider-{{ ai_gen_id }}', BeforeAfterSlider{{ ai_gen_id }});
    }
  })();
</script>

{% schema %}
{
  "name": "Before After Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "range",
      "id": "aspect_ratio",
      "min": 40,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Aspect ratio",
      "default": 75,
      "info": "Sets the height relative to width"
    },
    {
      "type": "header",
      "content": "Slider Settings"
    },
    {
      "type": "range",
      "id": "initial_position",
      "min": 10,
      "max": 90,
      "step": 5,
      "unit": "%",
      "label": "Initial slider position",
      "default": 50
    },
    {
      "type": "color",
      "id": "slider_color",
      "label": "Slider color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 20,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Handle size",
      "default": 30
    },
    {
      "type": "color",
      "id": "handle_arrow_color",
      "label": "Handle arrow color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_position",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Label position from top",
      "default": 20
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "label_background",
      "label": "Label background color",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Before After Slider"
    }
  ]
}
{% endschema %}