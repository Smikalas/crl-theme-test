<!doctype html>
<html
  class="no-js{% if request.design_mode %} shopify-design-mode{% endif %}"
  lang="{{ request.locale.iso_code }}"
>
  <head>
  <script src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/gsap.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/ScrollTrigger.min.js"></script>
<!-- ScrollSmoother requires ScrollTrigger -->
<script src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/ScrollSmoother.min.js"></script>

    {{ 'base.css' | asset_url | stylesheet_tag }}

    {%- if settings.favicon != blank -%}
      <link
        rel="icon"
        type="image/png"
        href="{{ settings.favicon | image_url: width: 32, height: 32 }}"
      >
    {%- endif -%}

    {% comment %} This a way to wait for main content to load when navigating to a new page so that the view transitions can work consistently {% endcomment %}
    <link
      rel="expect"
      href="#MainContent"
      blocking="render"
      id="view-transition-render-blocker"
    >

    {%- render 'meta-tags' -%}
    {%- render 'fonts' -%}
    {%- render 'scripts' -%}
    {%- render 'theme-styles-variables' -%}
    {%- render 'color-schemes' -%}

    {% if request.design_mode %}
      {%- render 'theme-editor' -%}
    {% endif %}

    {{ content_for_header }}
  </head>

  <body class="page-width-{{ settings.page_width }} card-hover-effect-{{ settings.card_hover_effect }}">
    {% render 'skip-to-content-link', href: '#MainContent', text: 'accessibility.skip_to_text' %}
    <div id="header-group">
      {% sections 'header-group' %}
    </div>

    <main
      id="MainContent"
      class="content-for-layout"
      role="main"
      data-page-transition-enabled="{{ settings.page_transition_enabled }}"
      data-product-transition="{{ settings.transition_to_main_product }}"
      data-template="{{ template }}"
    >
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    {% render 'search-modal' %}

    {% # theme-check-disable ParserBlockingScript %}
    <script src="{{ 'critical.js' | asset_url }}"></script>
    {% # theme-check-enable ParserBlockingScript %}

    {% if settings.quick_add or settings.mobile_quick_add %}
      {% render 'quick-add-modal' %}
    {% endif %}
  </body>

<script>
    (function() {
      'use strict';
      
      // Configuration
      const CONFIG = {
        CACHE_KEY: 'userLocationData',
        CACHE_TIME_KEY: 'locationCacheTime',
        CACHE_DURATION: 24 * 60 * 60 * 1000, // 24 hours
        API_TIMEOUT: 5000, // 5 seconds
        RETRY_ATTEMPTS: 2,
        RETRY_DELAY: 1000 // 1 second
      };

      // Shipping data map for better maintainability
      const SHIPPING_DATA = {
        'AT': { text: 'Estimated shipping to Austria: 5-7 business days', days: '5-7' },
        'BE': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'BG': { text: 'Estimated shipping: 6-8 business days', days: '6-8' },
        'HR': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'CY': { text: 'Estimated shipping: 6-9 business days', days: '6-9' },
        'CZ': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'DK': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'EE': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'FI': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'FR': { text: 'Estimated shipping: 5-9 business days', days: '5-9' },
        'DE': { text: 'Estimated shipping: 5-8 business days', days: '5-8' },
        'GR': { text: 'Estimated shipping: 6-10 business days', days: '6-10' },
        'HU': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'IE': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'IT': { text: 'Estimated shipping: 5-9 business days', days: '5-9' },
        'LV': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'LT': { text: 'Numatomas pristatymas: 3-5 darbo dienos', days: '3-5' },
        'LU': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'MT': { text: 'Estimated shipping: 6-9 business days', days: '6-9' },
        'NL': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'PL': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'PT': { text: 'Estimated shipping: 5-9 business days', days: '5-9' },
        'RO': { text: 'Estimated shipping: 6-8 business days', days: '6-8' },
        'SK': { text: 'Estimated shipping: 4-6 business days', days: '4-6' },
        'SI': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'ES': { text: 'Estimated shipping: 5-9 business days', days: '5-9' },
        'SE': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'US': { text: 'Estimated shipping: 5-10 business days', days: '5-10' },
        'CA': { text: 'Estimated shipping: 5-7 business days', days: '5-7' },
        'JP': { text: 'Estimated shipping: 7-10 business days', days: '7-10' },
        'KR': { text: 'Estimated shipping: 7-10 business days', days: '7-10' },
        'default': { text: 'Estimated shipping: 7-10 business days', days: '7-10' }
      };

      // Utility functions
      function isLocalStorageAvailable() {
        try {
          const test = '__localStorage_test__';
          localStorage.setItem(test, test);
          localStorage.removeItem(test);
          return true;
        } catch (e) {
          return false;
        }
      }

      function getCachedLocation() {
        if (!isLocalStorageAvailable()) return null;
        
        try {
          const cachedData = localStorage.getItem(CONFIG.CACHE_KEY);
          const cacheTime = localStorage.getItem(CONFIG.CACHE_TIME_KEY);
          
          if (!cachedData || !cacheTime) return null;
          
          const age = Date.now() - parseInt(cacheTime, 10);
          if (age > CONFIG.CACHE_DURATION) {
            localStorage.removeItem(CONFIG.CACHE_KEY);
            localStorage.removeItem(CONFIG.CACHE_TIME_KEY);
            return null;
          }
          
          return JSON.parse(cachedData);
        } catch (error) {
          console.warn('Error reading cached location data:', error);
          return null;
        }
      }

      function setCachedLocation(data) {
        if (!isLocalStorageAvailable()) return;
        
        try {
          localStorage.setItem(CONFIG.CACHE_KEY, JSON.stringify(data));
          localStorage.setItem(CONFIG.CACHE_TIME_KEY, Date.now().toString());
        } catch (error) {
          console.warn('Error caching location data:', error);
        }
      }

      function fetchWithTimeout(url, timeout = CONFIG.API_TIMEOUT) {
        return Promise.race([
          fetch(url),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), timeout)
          )
        ]);
      }

      async function fetchLocationWithRetry(attempts = CONFIG.RETRY_ATTEMPTS) {
        for (let i = 0; i < attempts; i++) {
          try {
            const response = await fetchWithTimeout('https://ipinfo.io/json?token=6738c55e24351a');
            
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (!data.country) {
              throw new Error('Invalid response: missing country data');
            }
            
            return data;
          } catch (error) {
            console.warn(`Location fetch attempt ${i + 1} failed:`, error.message);
            
            if (i === attempts - 1) {
              throw error;
            }
            
            // Wait before retry
            await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_DELAY * (i + 1)));
          }
        }
      }

      function updateShippingDates(countryCode) {
        const shippingElements = document.querySelectorAll('#shipping-dates, [data-shipping-info]');
        
        if (shippingElements.length === 0) {
          console.warn('No shipping date elements found');
          return;
        }

        const shippingInfo = SHIPPING_DATA[countryCode] || SHIPPING_DATA.default;
        
        shippingElements.forEach(element => {
          if (element) {
            element.innerHTML = shippingInfo.text;
            element.setAttribute('data-country', countryCode || 'unknown');
            element.setAttribute('data-shipping-days', shippingInfo.days);
          }
        });

        // Dispatch custom event for other scripts to listen to
        document.dispatchEvent(new CustomEvent('shippingDatesUpdated', {
          detail: { 
            countryCode: countryCode || 'unknown', 
            shippingInfo: shippingInfo 
          }
        }));

        console.log(`Shipping dates updated for country: ${countryCode || 'default'}`);
      }

      async function initializeShippingDates() {
        try {
          // Check cache first
          const cachedData = getCachedLocation();
          if (cachedData && cachedData.country) {
            console.log('Using cached location data:', cachedData.country);
            updateShippingDates(cachedData.country);
            return;
          }

          // Fetch fresh data
          console.log('Fetching fresh location data...');
          const locationData = await fetchLocationWithRetry();
          
          setCachedLocation(locationData);
          updateShippingDates(locationData.country);
          
        } catch (error) {
          console.error('Failed to fetch location data:', error);
          updateShippingDates(null);
        }
      }

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeShippingDates);
      } else {
        initializeShippingDates();
      }

      // Expose utility for manual refresh (useful for testing)
      window.refreshShippingDates = function() {
        if (isLocalStorageAvailable()) {
          localStorage.removeItem(CONFIG.CACHE_KEY);
          localStorage.removeItem(CONFIG.CACHE_TIME_KEY);
        }
        initializeShippingDates();
      };

    })();
  </script>

</html>
